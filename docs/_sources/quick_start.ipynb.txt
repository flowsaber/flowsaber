{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Quick Start"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Installation\n",
    "\n",
    "- Install from PYPI or from source.\n",
    "\n",
    "```\n",
    "pip install flowsaber\n",
    "```\n",
    "\n",
    "Or\n",
    "\n",
    "```bash\n",
    "https://github.com/zhqu1148980644/flowsaber.git\n",
    "cd flowsaber && pip install .\n",
    "```\n",
    "\n",
    "### Main concepts\n",
    "\n",
    "For users who are familiar with nextflow usages can skip this part, other's can also check\n",
    "[this](https://www.nextflow.io/docs/edge/basic.html) for similar descriptions that comes from the introduction\n",
    "section of the nextflow documentation.\n",
    "\n",
    "Basically there are several components that are exposed to users for building and configuring workflows.\n",
    "\n",
    "##### Task\n",
    "`Task` is the object represents the execution unit in your workflow. Tasks runs in parallel for different inputs.\n",
    "\n",
    "##### Flow\n",
    "`Flow` is the object that combines and records dependencies of all tasks you have put in. After it's been\n",
    "defined, it should be passed to `FlowRunner` for the actual dependency building and flow execution.\n",
    "\n",
    "##### Channel\n",
    "`Channel` represents a flow/queue of data, it's consumed by Tasks. Any user defined data should be\n",
    "enqueued into a channel and then as arguments of Task/Flow.\n",
    "\n",
    "##### Operator\n",
    "`Operator` is built-in tasks that helps to manipulate the control of channels.\n",
    "\n",
    "- For example: `map, sum, count, collect, flatten....`\n",
    "\n",
    "### A Typical workflow\n",
    "\n",
    "The workflow defined below covers most sets of features supported by pyflow.\n",
    "\n",
    "- Note: the output of the workflow may be different in different runs, this is\n",
    "due to the parallelism of task's executions for different inputs."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [
    {
     "data": {
      "text/plain": "<rich.jupyter.JupyterRenderable at 0x7fb029c96040>",
      "text/html": "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Your config is: \n<span style=\"font-weight: bold\">{</span>\n    <span style=\"color: #008000; text-decoration-color: #008000\">'_Context__flow_stack'</span>: <span style=\"font-weight: bold\">[]</span>,\n    <span style=\"color: #008000; text-decoration-color: #008000\">'_Context__env_tasks'</span>: <span style=\"font-weight: bold\">{}</span>,\n    <span style=\"color: #008000; text-decoration-color: #008000\">'_flow_stack'</span>: <span style=\"font-weight: bold\">[]</span>,\n    <span style=\"color: #008000; text-decoration-color: #008000\">'cpu'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">8</span>,\n    <span style=\"font-weight: bold\">&lt;</span><span style=\"color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold\">class</span><span style=\"color: #000000; text-decoration-color: #000000\"> </span><span style=\"color: #008000; text-decoration-color: #008000\">'flowsaber.core.task.Task'</span><span style=\"font-weight: bold\">&gt;</span>: <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'executor'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'local'</span><span style=\"font-weight: bold\">}</span>\n<span style=\"font-weight: bold\">}</span>\n</pre>\n"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "Output()",
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "bb352226d89243c0a52e4f74740f1b5b"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import sys\n",
    "\n",
    "import matplotlib.image as mpimg\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "sys.path.insert(0, '../../')\n",
    "from flowsaber import *\n",
    "\n",
    "\n",
    "@task\n",
    "def add(self, num):  # self is optional\n",
    "    return num + 1\n",
    "\n",
    "\n",
    "@task\n",
    "def multiply(num1, num2):\n",
    "    return num1 * num2\n",
    "\n",
    "\n",
    "@shell\n",
    "def write(num):\n",
    "    \"\"\"echo {num} > 1.txt\"\"\"\n",
    "    return '*.txt'\n",
    "\n",
    "\n",
    "@task\n",
    "def read(f: File):\n",
    "    return open(str(f)).readlines()\n",
    "\n",
    "\n",
    "@flow\n",
    "def sub_flow(num):\n",
    "    return add(num) | map_(lambda x: x ** 2) | add\n",
    "\n",
    "\n",
    "@flow\n",
    "def my_flow(num):\n",
    "    [sub_flow(num), sub_flow(num)] | multiply \\\n",
    "    | write | read | flatten \\\n",
    "    | map_(lambda x: int(x.strip())) \\\n",
    "    | view\n",
    "\n",
    "\n",
    "config.update({\n",
    "    'cpu': 8,\n",
    "    Task: {\n",
    "        'executor': 'local'  # for test, use simple one\n",
    "    }\n",
    "})\n",
    "\n",
    "# set input\n",
    "num_ch = Channel.values(1, 2, 3)\n",
    "# resolve dependencies\n",
    "runner, workflow = FlowRunner(my_flow).run(num=num_ch)\n",
    "# now can generate dag\n",
    "workflow.graph.render('workflow', view=False, format='png', cleanup=True)\n",
    "# truly run the flow\n",
    "await runner.aexecute()\n",
    "\n",
    "# visualize the flow\n",
    "\n",
    "img = mpimg.imread('workflow.png')\n",
    "imgplot = plt.imshow(img)\n",
    "plt.show(block=False)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}