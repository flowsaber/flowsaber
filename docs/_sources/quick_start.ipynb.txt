{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "# Quick Start"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Installation\n",
    "\n",
    "- Install from PYPI or from source.\n",
    "\n",
    "```\n",
    "pip install flowsaber\n",
    "```\n",
    "\n",
    "Or\n",
    "\n",
    "```bash\n",
    "https://github.com/zhqu1148980644/flowsaber.git\n",
    "cd flowsaber && pip install .\n",
    "```\n",
    "\n",
    "### Main concepts\n",
    "\n",
    "For users who are familiar with nextflow usages can skip this part, other's can also check\n",
    "[this](https://www.nextflow.io/docs/edge/basic.html) for similar descriptions that comes from the introduction\n",
    "section of the nextflow documentation.\n",
    "\n",
    "Basically there are several components that are exposed to users for building and configuring workflows.\n",
    "\n",
    "##### Task\n",
    "`Task` is the object represents the execution unit in your workflow. Tasks runs in parallel for different inputs.\n",
    "\n",
    "##### Flow\n",
    "`Flow` is the object that combines and records dependencies of all tasks you have put in. After it's been\n",
    "instantiated, it should be called for the actual dependency building and then can be executed by call `flow.execute()`.\n",
    "\n",
    "##### Channel\n",
    "`Channel` represents a flow/queue of data, it's consumed by Tasks. Any user defined data should be\n",
    "enqueued into a channel and then as arguments of Task/Flow.\n",
    "\n",
    "##### Operator\n",
    "`Operator` is built-in tasks that helps to manipulate the control of channels.\n",
    "\n",
    "- For example: `map, sum, count, collect, flatten....`\n",
    "\n",
    "### A Typical workflow\n",
    "\n",
    "The workflow defined below covers most sets of features supported by pyflow.\n",
    "\n",
    "- Note: the output of the workflow may be different in different runs, this is\n",
    "due to the parallelism of task's executions for different inputs."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [
    {
     "data": {
      "text/plain": "<rich.jupyter.JupyterRenderable at 0x7faa09c6cd60>",
      "text/html": "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">Config is: \n<span style=\"font-weight: bold\">{</span>\n    <span style=\"color: #008000; text-decoration-color: #008000\">'_Context__flow_stack'</span>: <span style=\"font-weight: bold\">[]</span>,\n    <span style=\"color: #008000; text-decoration-color: #008000\">'_Context__env_tasks'</span>: <span style=\"font-weight: bold\">{}</span>,\n    <span style=\"color: #008000; text-decoration-color: #008000\">'_flow_stack'</span>: <span style=\"font-weight: bold\">[]</span>,\n    <span style=\"color: #008000; text-decoration-color: #008000\">'cpu'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">8</span>,\n    <span style=\"font-weight: bold\">&lt;</span><span style=\"color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold\">class</span><span style=\"color: #000000; text-decoration-color: #000000\"> </span><span style=\"color: #008000; text-decoration-color: #008000\">'flowsaber.core.task.Task'</span><span style=\"font-weight: bold\">&gt;</span>: <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'executor'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'ray'</span><span style=\"font-weight: bold\">}</span>\n<span style=\"font-weight: bold\">}</span>\n</pre>\n"
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": "Output()",
      "application/vnd.jupyter.widget-view+json": {
       "version_major": 2,
       "version_minor": 0,
       "model_id": "3aee1469e0694cc2a20659d33202a8ab"
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25\n",
      "4100\n",
      "1300\n",
      "4225\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 432x288 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import sys\n",
    "\n",
    "import matplotlib.image as mpimg\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "sys.path.insert(0, '../../')\n",
    "import flowsaber\n",
    "from flowsaber import *\n",
    "\n",
    "EnvTask.DEFAULT_CONFIG = {'task_workdir': '/tmp/Env'}  # make the EnvTask cache at a global place\n",
    "\n",
    "@task\n",
    "def add(self, num):  # self is optional\n",
    "    return num + 1\n",
    "\n",
    "@task\n",
    "def multiply(num1, num2):\n",
    "    return num1 * num2\n",
    "\n",
    "@shell\n",
    "def write(num):\n",
    "    \"\"\"echo {num} > 1.txt\"\"\"\n",
    "    return '*.txt'\n",
    "\n",
    "@task\n",
    "def read(f: File):\n",
    "    return open(str(f)).readlines()\n",
    "\n",
    "@flow\n",
    "def sub_flow(num):\n",
    "    return add(num) | map_(lambda x: x ** 2) | add\n",
    "\n",
    "@flow\n",
    "def my_flow(num):\n",
    "    [sub_flow(num), sub_flow(num)] | multiply \\\n",
    "    | write | read | flatten \\\n",
    "    | map_(lambda x: int(x.strip())) \\\n",
    "    | view\n",
    "\n",
    "config_dict.update({\n",
    "    'cpu': 8,\n",
    "    Task: {\n",
    "        'executor': 'ray'\n",
    "    }\n",
    "})\n",
    "\n",
    "# set input\n",
    "num_ch = Channel.values(1, 2, 3, 4, 5, 6, 7, 8)\n",
    "# resolve dependencies\n",
    "workflow = my_flow(num=num_ch)\n",
    "# now can generate dag\n",
    "workflow.graph.render('quick_start_dag', view=False, format='png', cleanup=True)\n",
    "# try run the flow\n",
    "# Note: this is specific for ipython environment, in normal cases, use `asyncio.run`\n",
    "await flowsaber.run(workflow)\n",
    "\n",
    "# visualize the flow\n",
    "img = mpimg.imread('quick_start_dag.png')\n",
    "imgplot = plt.imshow(img)\n",
    "plt.show(block=False)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Example for real work\n",
    "\n",
    "- This is a rewrite version of [snakemake tutorial](https://snakemake.readthedocs.io/en/stable/tutorial/short.html)\n",
    "\n",
    "```python\n",
    "import flowsaber\n",
    "from flowsaber import *\n",
    "\n",
    "\n",
    "# EnvTask is the real dependent task when using conda/image option\n",
    "EnvTask.DEFAULT_CONFIG = {'task_workdir': '/tmp/Env'}  # make the EnvTask cache at a global place\n",
    "\n",
    "@shell(conda=\"bwa=0.7.17 samtools=1.9\")\n",
    "def bwa(self, fa: File, fastq: File):  # input will be automatically converted if has type annotation\n",
    "    \"\"\"bwa mem -t {self.cpu} {fa} {fastq} | samtools view -Sb - > {fastq.stem}.bam\"\"\"\n",
    "    return \"*.bam\"  # for ShellTask, str variable in the return will be treated as File and globed\n",
    "\n",
    "@shell(conda=\"bwa=0.7.17 samtools=1.9\")\n",
    "def sort(bam: File):  # self is optional in case you don't want to access the current task\n",
    "    \"\"\"samtools sort -o {sorted_bam} {bam}\"\"\"  # use local variable\n",
    "    sorted_bam = f\"{bam.stem}.sorted.bam\"\n",
    "    return sorted_bam\n",
    "\n",
    "@shell(conda=\"bcftools=1.9 samtools=1.9\", pubdir=\"results/vcf\")\n",
    "def call(fa: File, bams: list):  # In case you need to write some python codes\n",
    "    bams = ' '.join(str(bam) for bam in bams)\n",
    "    Shell(f\"samtools mpileup -g -f {fa} {bams} | bcftools call -mv - > all.vcf\")\n",
    "    return \"all.vcf\"\n",
    "\n",
    "@task(pubdir=\"results/stats\")\n",
    "def stats(vcf: File):\n",
    "    import matplotlib\n",
    "    matplotlib.use(\"Agg\")\n",
    "    import matplotlib.pyplot as plt\n",
    "    from pysam import VariantFile\n",
    "\n",
    "    quals = [record.qual for record in VariantFile(vcf.open('rb'))]\n",
    "    plt.hist(quals)\n",
    "\n",
    "    plt.savefig(\"report.svg\")\n",
    "\n",
    "@flow\n",
    "def call_vcf_flow(fa, fastq):\n",
    "    def _call(bams):  # task is normal function, use python as wish\n",
    "        return call(fa, bams)\n",
    "\n",
    "    bam1 = bwa(fa, fastq)  # automatically clone channel\n",
    "    bam2 = bwa(fa, fastq)\n",
    "    mix(bam1, bam2) | sort | collect | _call | stats\n",
    "\n",
    "config_dict.update({\n",
    "    'cpu': 8,\n",
    "    'memory': 20,\n",
    "    Task: {\n",
    "        'executor': 'process'\n",
    "    }\n",
    "})\n",
    "\n",
    "prefix = '../../tests/snamke-demo.nosync/data'\n",
    "fa = Channel.value(f'{prefix}/genome.fa')\n",
    "fastq = Channel.values(*[f'{prefix}/samples/{sample}' for sample in ['A.fastq', 'B.fastq', 'C.fastq']])\n",
    "\n",
    "# resolve dependency\n",
    "workflow = call_vcf_flow(fa, fastq)\n",
    "# generate dag\n",
    "workflow.graph.render('snakemake_dag', view=False, format='png', cleanup=True)\n",
    "# run the flow\n",
    "asyncio.run(flowsaber.run(workflow))\n",
    "\n",
    "```"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}