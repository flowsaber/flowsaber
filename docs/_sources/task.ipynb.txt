{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "\n",
    "# Task\n",
    "\n",
    "There are four types of `Task` in total:\n",
    "\n",
    "- `BaseTask` is base class for all tasks, and all operators are subclassed from it. Codes in\n",
    "`BaseTask` will always be run in the main thread and event loop. Due to this limitation, you should not\n",
    "put computation-cost logic in it, otherwise the whole eventloop will be blocked and hinder other task's execution.\n",
    "- `Task` for running python functions. Execution of `run()` method will be scheduled and further executed by executor\n",
    "configured.\n",
    "- `ShellTask` for executing bash script. Support `conda` and `image` option compared to `Task`. When these options are\n",
    "specified, additional bash command for handling enviroment creation, activation will be run before the\n",
    "execution of user defined bash commnd.\n",
    "\n",
    "\n",
    "\n",
    "### EnvTask\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "### Operators\n",
    "\n",
    "All operators has three ways to used:\n",
    "- Operator's class name, a task object needs to be created before using. Usage:\n",
    "`Map()(channel)`\n",
    "- Operator's function name, all operator has been wraped into a function accepts the same argument as the\n",
    "original operator class. Usage: `merge(ch1, ch2, ch3)`\n",
    "- `Channel`'s method name, all operator has been added as a method of `Channel`.\n",
    "Usage: `ch1.map(fn)`\n",
    "\n",
    "\n",
    "All predefined operators are:\n",
    "- `Merge()`\n",
    "- `Flatten()`\n",
    "- `Mix()`\n",
    "- ....\n",
    "\n",
    "\n",
    "#### add custom operator\n",
    "- Since operators are all `Tasks`, you can define your own operator task and even add\n",
    "it as a `Channel` method.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}